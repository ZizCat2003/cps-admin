import { useForm } from 'react-hook-form';
import Button from '@/components/Button';
import Input from '@/components/Forms/Input';
import DatePicker from '@/components/DatePicker_two';
import Select from '@/components/Forms/Select';
import React, { useState, useEffect, useRef } from 'react'; // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° useRef
import { openAlert } from '@/redux/reducer/alert';
import { useAppDispatch } from '@/redux/hook';
import Alerts from '@/components/Alerts';
import Loader from '@/common/Loader';
import InputBox from '../../../components/Forms/Input_new';
import SelectBox from '../../../components/Forms/Select';
import ButtonBox from '../../../components/Button';
import BoxDate from '../../../components/Date';
import { usePrompt } from '@/hooks/usePrompt';



const CreatePatient = ({ setShow, getList, existingIds, existingPhones1, existingPhones2, onCloseCallback }) => {
  const [loading, setLoading] = useState(false);
  const dispatch = useAppDispatch();

  const {
    register,
    handleSubmit,
    reset,
    setValue,
    setFocus,
    formState: { isDirty, errors },
  } = useForm();

  // ‚úÖ ‡πÉ‡∏ä‡πâ useRef ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö current value ‡∏Ç‡∏≠‡∏á isDirty
  const isDirtyRef = useRef(isDirty);

  // ‚úÖ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï ref ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà isDirty ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
  useEffect(() => {
    isDirtyRef.current = isDirty;
  }, [isDirty]);

  // ‚úÖ ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢ navigation (Back / ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô route)
  usePrompt('‡∫ó‡ªà‡∫≤‡∫ô‡∫ï‡ªâ‡∫≠‡∫á‡∫Å‡∫≤‡∫ô‡∫≠‡∫≠‡∫Å‡∫à‡∫≤‡∫Å‡ªú‡ªâ‡∫≤‡∫ô‡∫µ‡ªâ‡ªÅ‡∫ó‡ªâ‡∫´‡∫º‡∫∑‡∫ö‡ªç? ‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫ó‡∫µ‡ªà‡∫Å‡∫≥‡∫•‡∫±‡∫á‡∫õ‡ªâ‡∫≠‡∫ô‡∫à‡∫∞‡∫™‡∫π‡∫ô‡ªÄ‡∫™‡∫ç.', isDirty);

  // ‚úÖ ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏∞‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä / ‡∏õ‡∏¥‡∏î‡πÅ‡∏ó‡πá‡∏ö
  useEffect(() => {
    const handleBeforeUnload = (event) => {
      if (!isDirtyRef.current) return;
      event.preventDefault();
      event.returnValue = '';
    };

    window.addEventListener('beforeunload', handleBeforeUnload);
    return () => {
      window.removeEventListener('beforeunload', handleBeforeUnload);
    };
  }, []);

  // ‚úÖ ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏¥‡∏î‡∏ü‡∏≠‡∏£‡πå‡∏° - ‡πÉ‡∏ä‡πâ current value ‡∏à‡∏≤‡∏Å ref
  const handleCloseForm = () => {
    if (isDirtyRef.current) {
      const confirmLeave = window.confirm('‡∫ó‡ªà‡∫≤‡∫ô‡∫ï‡ªâ‡∫≠‡∫á‡∫Å‡∫≤‡∫ô‡∫õ‡∫¥‡∫î‡∫ü‡∫≠‡∫°‡ªÅ‡∫ó‡ªâ‡∫´‡∫º‡∫∑‡∫ö‡ªç? ‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫ó‡∫µ‡ªà‡∫õ‡ªâ‡∫≠‡∫ô‡∫à‡∫∞‡∫™‡∫π‡∫ô‡ªÄ‡∫™‡∫ç');
      if (!confirmLeave) return;
    }
    setShow(false);
  };

  // ‚úÖ ‡∏™‡πà‡∏á handleCloseForm ‡πÑ‡∏õ‡πÉ‡∏´‡πâ parent component ‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
  useEffect(() => {
    if (onCloseCallback) {
      onCloseCallback(() => handleCloseForm);
    }
  }, [onCloseCallback]);

  const [gender, setGender] = useState('');

  const handleSave = async (data) => {
    setLoading(true);

    if (existingIds.includes(data.patient_id)) {
      setFocus('patient_id');  // ‡πÇ‡∏ü‡∏Å‡∏±‡∏™‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏ô‡πÄ‡∏à‡πá‡∏ö
      dispatch(
        openAlert({
          type: 'error',
          title: '‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î',
          message: '‡∫•‡∫∞‡∫´‡∫±‡∫î‡∫Ñ‡∫ª‡∫ô‡ªÄ‡∫à‡∫±‡∫ö ‡∫°‡∫µ‡ªÉ‡∫ô‡∫•‡∫∞‡∫ö‡∫ª‡∫ö‡ªÅ‡∫•‡ªâ‡∫ß',
        }),
      );
      setLoading(false);  // üõë ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏¢‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏≠‡∏¢‡∏π‡πà
      return; // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£

    } else if (existingPhones1.includes(data.phone1)) {
      setFocus('phone1');  // ‡πÇ‡∏ü‡∏Å‡∏±‡∏™‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏ô‡πÄ‡∏à‡πá‡∏ö
      dispatch(
        openAlert({
          type: 'error',
          title: '‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î',
          message: '‡ªÄ‡∫ö‡∫µ‡ªÇ‡∫ó‡∫ô‡∫µ‡ªâ ‡∫°‡∫µ‡ªÉ‡∫ô‡∫•‡∫∞‡∫ö‡∫ª‡∫ö‡ªÅ‡∫•‡ªâ‡∫ß',
        }),
      );
      setLoading(false);  // üõë ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏¢‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏≠‡∏¢‡∏π‡πà
      return; // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£

    } else if (existingPhones2.includes(data.phone2)) {
      setFocus('phone2');  // ‡πÇ‡∏ü‡∏Å‡∏±‡∏™‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏ô‡πÄ‡∏à‡πá‡∏ö
      dispatch(
        openAlert({
          type: 'error',
          title: '‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î',
          message: '‡ªÄ‡∫ö‡∫µ‡ªÇ‡∫ó‡∫ô‡∫µ‡ªâ ‡∫°‡∫µ‡ªÉ‡∫ô‡∫•‡∫∞‡∫ö‡∫ª‡∫ö‡ªÅ‡∫•‡ªâ‡∫ß',
        }),
      );
      setLoading(false);  // üõë ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏¢‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏≠‡∏¢‡∏π‡πà
      return; // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£

    } else if (data.phone1 === data.phone2) {
      setFocus('phone2');  // ‡πÇ‡∏ü‡∏Å‡∏±‡∏™‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏ô‡πÄ‡∏à‡πá‡∏ö
      dispatch(
        openAlert({
          type: 'error',
          title: '‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î',
          message: '‡∫Å‡∫∞‡∫•‡∫∏‡ªÉ‡∫™‡ªÄ‡∫ö‡∫µ‡ªÇ‡∫ó‡∫ö‡ªç‡ªà‡ªÉ‡∫´‡ªâ‡∫ä‡∫≥‡ªâ‡∫Å‡∫±‡∫ô',
        }),
      );
      setLoading(false);  // üõë ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏¢‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏≠‡∏¢‡∏π‡πà
      return; // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
    }

    try {
      const response = await fetch(
        'http://localhost:4000/src/manager/patient',
        {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ ...data, gender }),
        },
      );

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.error || '‡∫ö‡∫±‡∫ô‡∫ó‡∫∑‡∫Å‡∫ö‡ªç‡ªà‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î');
      }

      dispatch(
        openAlert({
          type: 'success',
          title: '‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î',
          message: '‡∫ö‡∫±‡∫ô‡∫ó‡∫∑‡∫Å‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î‡ªÅ‡∫•‡ªâ‡∫ß',
        }),
      );
      setShow(false);
      await getList();
      reset();
    } catch (error) {
      dispatch(
        openAlert({
          type: 'error',
          title: '‡ªÄ‡∫Å‡∫µ‡∫î‡∫Ç‡ªç‡ªâ‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î',
          message: '‡∫°‡∫µ‡∫Ç‡ªç‡ªâ‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î‡ªÉ‡∫ô‡∫Å‡∫≤‡∫ô‡∫ö‡∫±‡∫ô‡∫ó‡∫∂‡∫Å‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô',
        }),
      );
    } finally {
      setLoading(false);
    }
  };

  if (loading) return <Loader />;

  return (
    <div className="rounded bg-white pt-4 dark:bg-boxdark">
      <Alerts />

      <div className="flex items-center border-b border-stroke dark:border-strokedark pb-4">
        <h1 className="text-md md:text-lg lg:text-xl font-medium text-strokedark dark:text-bodydark3 px-4">
          ‡ªÄ‡∫û‡∫µ‡ªà‡∫°‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô
        </h1>
      </div>

      <form
        onSubmit={handleSubmit(handleSave)}
        className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-4 mt-4 px-4"
      >
        <InputBox
          label="‡∫•‡∫∞‡∫´‡∫±‡∫î‡∫Ñ‡∫ª‡∫ô‡ªÄ‡∫à‡∫±‡∫ö"
          name="patient_id"
          type="text"
          placeholder="‡∫õ‡ªâ‡∫≠‡∫ô‡∫•‡∫∞‡∫´‡∫±‡∫î‡∫Ñ‡∫ª‡∫ô‡ªÄ‡∫à‡∫±‡∫ö"
          register={register}
          formOptions={{ required: '‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡∫õ‡ªâ‡∫≠‡∫ô‡∫•‡∫∞‡∫´‡∫±‡∫î‡∫Ñ‡∫ª‡∫ô‡ªÄ‡∫à‡∫±‡∫ö‡∫Å‡ªà‡∫≠‡∫ô' }}
          errors={errors}
        />
        <InputBox
          label="‡∫ä‡∫∑‡ªà‡∫Ñ‡∫ª‡∫ô‡ªÄ‡∫à‡∫±‡∫ö"
          name="patient_name"
          type="text"
          placeholder="‡∫õ‡ªâ‡∫≠‡∫ô‡∫ä‡∫∂‡ªà"
          register={register}
          formOptions={{ required: '‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡∫õ‡ªâ‡∫≠‡∫ô‡∫ä‡∫∑‡ªà‡∫Ñ‡∫ª‡∫ô‡ªÄ‡∫à‡∫±‡∫ö‡∫Å‡ªà‡∫≠‡∫ô' }}
          errors={errors}
        />
        <InputBox
          label="‡∫ô‡∫≤‡∫°‡∫™‡∫∞‡∫Å‡∫∏‡∫ô"
          name="patient_surname"
          type="text"
          placeholder="‡∫ô‡∫≤‡∫°‡∫™‡∫∞‡∫Å‡∫∏‡∫ô"
          register={register}
          formOptions={{ required: '‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡∫õ‡ªâ‡∫≠‡∫ô‡∫ô‡∫≤‡∫°‡∫™‡∫∞‡∫Å‡∫∏‡∫ô‡∫Å‡ªà‡∫≠‡∫ô' }}
          errors={errors}
        />

        <SelectBox
          label="‡ªÄ‡∫û‡∫î"
          name="‡ªÄ‡∫û‡∫î"
          options={['‡∫ä‡∫≤‡∫ç', '‡∫ç‡∫¥‡∫á']}
          register={register}
          errors={errors}
          value={gender}
          onSelect={(e) => setGender(e.target.value)}
        />

        <BoxDate
          select=""
          register={register}
          errors={errors}
          name="dob"
          label="‡∫ß‡∫±‡∫ô‡ªÄ‡∫î‡∫∑‡∫≠‡∫ô‡∫õ‡∫¥‡ªÄ‡∫Å‡∫µ‡∫î"
          formOptions={{ required: '‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡ªÉ‡∫™‡ªà‡∫ß‡∫±‡∫ô‡ªÄ‡∫î‡∫∑‡∫≠‡∫ô‡∫õ‡∫µ‡ªÄ‡∫Å‡∫µ‡∫î' }}
          setValue={setValue}
        />
        <InputBox
          label="‡ªÄ‡∫ö‡∫µ‡∫ï‡∫¥‡∫î‡∫ï‡ªç‡ªà"
          name="phone1"
          type="tel"
          placeholder="‡∫õ‡ªâ‡∫≠‡∫ô‡ªÄ‡∫ö‡∫µ‡∫ï‡∫¥‡∫î‡∫ï‡ªç‡ªà"
          register={register}
          formOptions={{
            required: '‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡∫õ‡ªâ‡∫≠‡∫ô‡ªÄ‡∫ö‡∫µ‡∫ï‡∫¥‡∫î‡∫ï‡ªç‡ªà‡∫Å‡ªà‡∫≠‡∫ô',
            pattern: {
              value: /^[0-9]+$/,
              message: '‡ªÄ‡∫ö‡∫µ‡∫ï‡∫¥‡∫î‡∫ï‡ªç‡ªà‡∫ï‡ªâ‡∫≠‡∫á‡ªÄ‡∫õ‡∫±‡∫ô‡∫ï‡∫ª‡∫ß‡ªÄ‡∫•‡∫Å‡ªÄ‡∫ó‡∫ª‡ªà‡∫≤‡∫ô‡∫±‡ªâ‡∫ô',
            },
            minLength: {
              value: 8,
              message: '‡ªÄ‡∫ö‡∫µ‡∫ï‡∫¥‡∫î‡∫ï‡ªç‡ªà‡∫ï‡ªâ‡∫≠‡∫á‡∫°‡∫µ‡∫¢‡ªà‡∫≤‡∫á‡ªú‡ªâ‡∫≠‡∫ç 8 ‡∫ï‡∫ª‡∫ß‡ªÄ‡∫•‡∫Å',
            },
          }}
          errors={errors}
        />
        <InputBox
          label="‡ªÄ‡∫ö‡∫µ‡∫ï‡∫¥‡∫î‡∫ï‡ªç‡ªà"
          name="phone2"
          type="tel"
          placeholder="‡∫õ‡ªâ‡∫≠‡∫ô‡ªÄ‡∫ö‡∫µ‡∫ï‡∫¥‡∫î‡∫ï‡ªç‡ªà"
          register={register}
          formOptions={{
            required: '‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡∫õ‡ªâ‡∫≠‡∫ô‡ªÄ‡∫ö‡∫µ‡∫ï‡∫¥‡∫î‡∫ï‡ªç‡ªà‡∫Å‡ªà‡∫≠‡∫ô',
            pattern: {
              value: /^[0-9]+$/,
              message: '‡ªÄ‡∫ö‡∫µ‡∫ï‡∫¥‡∫î‡∫ï‡ªç‡ªà‡∫ï‡ªâ‡∫≠‡∫á‡ªÄ‡∫õ‡∫±‡∫ô‡∫ï‡∫ª‡∫ß‡ªÄ‡∫•‡∫Å‡ªÄ‡∫ó‡∫ª‡ªà‡∫≤‡∫ô‡∫±‡ªâ‡∫ô',
            },
            minLength: {
              value: 8,
              message: '‡ªÄ‡∫ö‡∫µ‡∫ï‡∫¥‡∫î‡∫ï‡ªç‡ªà‡∫ï‡ªâ‡∫≠‡∫á‡∫°‡∫µ‡∫¢‡ªà‡∫≤‡∫á‡ªú‡ªâ‡∫≠‡∫ç 8 ‡∫ï‡∫ª‡∫ß‡ªÄ‡∫•‡∫Å',
            },
          }}
          errors={errors}
        />
        <InputBox
          label="‡∫ö‡ªâ‡∫≤‡∫ô"
          name="village"
          type="text"
          placeholder="‡∫ö‡ªâ‡∫≤‡∫ô"
          register={register}
          formOptions={{ required: '‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡∫õ‡ªâ‡∫≠‡∫ô‡∫ö‡ªâ‡∫≤‡∫ô‡∫Å‡ªà‡∫≠‡∫ô' }}
          errors={errors}
        />
        <InputBox
          label="‡ªÄ‡∫°‡∫∑‡∫≠‡∫á"
          name="district"
          type="text"
          placeholder="‡ªÄ‡∫°‡∫∑‡∫≠‡∫á"
          register={register}
          formOptions={{ required: '‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡∫õ‡ªâ‡∫≠‡∫ô‡ªÄ‡∫°‡∫∑‡∫≠‡∫á‡∫Å‡ªà‡∫≠‡∫ô' }}
          errors={errors}
        />
        <InputBox
          label="‡ªÅ‡∫Ç‡∫ß‡∫á"
          name="province"
          type="text"
          placeholder="‡ªÅ‡∫Ç‡∫ß‡∫á"
          register={register}
          formOptions={{ required: '‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡∫õ‡ªâ‡∫≠‡∫ô‡ªÅ‡∫Ç‡∫ß‡∫á‡∫Å‡ªà‡∫≠‡∫ô' }}
          errors={errors}
        />

        <div className="mt-4 flex justify-end space-x-4 col-span-full py-4">

          <ButtonBox variant="save" type="submit" disabled={loading}>
            {loading ? '‡∫Å‡∫≥‡∫•‡∫±‡∫á‡∫ö‡∫±‡∫ô‡∫ó‡∫∂‡∫Å...' : '‡∫ö‡∫±‡∫ô‡∫ó‡∫∂‡∫Å'}
          </ButtonBox>
        </div>
      </form>
    </div>
  );
};

export default CreatePatient;
